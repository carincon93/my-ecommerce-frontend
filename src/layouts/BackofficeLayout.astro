---
import { ClientRouter } from 'astro:transitions'
import '@/styles/global.css'

import backgroundLight from '@/assets/background-backoffice.svg'
import backgroundDark from '@/assets/background-dark.svg'
import { Toaster } from '@/components/ui/toaster'

import { URL_BACKEND_UPLOADS } from 'astro:env/client'
import { fetchEcommerceData } from '@/services/ecommerceService'
import { LogOut, Store } from 'lucide-react'
import { SignOutButton } from '@clerk/astro/components'

const result = await fetchEcommerceData()

const title = Astro.props.title ? Astro.props.title.replace(/^\w+/, (match: string) => match.charAt(0).toUpperCase() + match.slice(1).toLowerCase()) : 'Astro'
---

<!doctype html>
<html lang="es">
    <head>
        <meta charset="UTF-8" />
        <meta
            name="viewport"
            content="width=device-width"
        />
        <link
            rel="icon"
            type="image/svg+xml"
            media="(prefers-color-scheme: dark)"
            href={`${URL_BACKEND_UPLOADS}/ecommerce/${result?.data?.faviconLight}`}
        />
        <link
            rel="icon"
            type="image/svg+xml"
            media="(prefers-color-scheme: light)"
            href={`${URL_BACKEND_UPLOADS}/ecommerce/${result?.data?.faviconDark}`}
        />
        <meta
            name="generator"
            content={Astro.generator}
        />
        <ClientRouter />
        <title>{title}</title>

        <script>
            const applyTheme = () => {
                const theme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
                document.documentElement.classList.toggle('dark', theme === 'dark')
            }

            applyTheme() // Aplica el tema en la carga inicial

            document.addEventListener('astro:after-swap', applyTheme) // Re-aplica el tema al cambiar de p√°gina
        </script>

        <script is:inline>
            const getThemePreference = () => {
                if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
                    return localStorage.getItem('theme')
                }
                return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
            }
            const isDark = getThemePreference() === 'dark'
            document.documentElement.classList[isDark ? 'add' : 'remove']('dark')

            if (typeof localStorage !== 'undefined') {
                const observer = new MutationObserver(() => {
                    const isDark = document.documentElement.classList.contains('dark')
                    localStorage.setItem('theme', isDark ? 'dark' : 'light')
                })
                observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] })
            }
        </script>
    </head>
    <body>
        <img
            id="background"
            src={backgroundLight.src}
            class="max-sm:!-top-[30%] [.dark_&]:hidden"
            alt=""
            fetchpriority="high"
        />

        <img
            id="background"
            src={backgroundDark.src}
            class="max-sm:!-top-[30%] hidden [.dark_&]:block"
            alt=""
            fetchpriority="high"
        />
        <slot />
        <Toaster client:load />
        <div class="fixed bottom-4 right-4 flex items-center gap-2">
            <a
                href="/"
                class="bg-black p-4 rounded-full hover:opacity-80">
                <Store color="white" />
            </a>
            <SignOutButton class="bg-black p-4 rounded-full hover:opacity-80 hover:cursor-pointer">
                <LogOut color="white" />
            </SignOutButton>
        </div>
    </body>
</html>

<style>
    html,
    body {
        margin: 0;
        width: 100%;
        height: 100%;
        min-height: 100%;
    }

    /* body[data-scroll-locked][data-scroll-locked] {
        overflow-y: scroll !important;
    } */

    body {
        overflow-y: scroll;
    }

    #background-backoffice {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        filter: blur(100px);
    }
</style>
